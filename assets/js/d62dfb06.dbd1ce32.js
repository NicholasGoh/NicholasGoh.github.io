"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7273],{6916:e=>{e.exports=JSON.parse('{"permalink":"/blog/customer-service-automation","source":"@site/blog/2025-03-01-customer-service/index.mdx","title":"Customer Service Automation","description":"Introduction","date":"2025-03-01T00:00:00.000Z","tags":[{"inline":true,"label":"agentic-workflow","permalink":"/blog/tags/agentic-workflow"},{"inline":true,"label":"multi-agents","permalink":"/blog/tags/multi-agents"}],"readingTime":7.92,"hasTruncateMarker":true,"authors":[{"name":"Nicholas Goh","title":"AI Full Stack Engineer","url":"https://nicholas-goh.com","page":{"permalink":"/blog/authors/all-nicholas-goh-articles"},"socials":{"linkedin":"https://www.linkedin.com/in/nicholas-goh-19ba1b194/","github":"https://github.com/NicholasGoh"},"imageURL":"https://avatars.githubusercontent.com/u/58037050?s=400&u=cc1cb1686de3cfbf92b95cd8b8bad22291c1a068&v=4","key":"nicholas"}],"frontMatter":{"slug":"customer-service-automation","title":"Customer Service Automation","authors":["nicholas"],"tags":["agentic-workflow","multi-agents"]},"unlisted":false,"nextItem":{"title":"ETL Automation","permalink":"/blog/etl-automation"}}')},7467:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var s=i(6916),t=i(4848),a=i(8453),r=i(3554),o=i.n(r);const l={slug:"customer-service-automation",title:"Customer Service Automation",authors:["nicholas"],tags:["agentic-workflow","multi-agents"]},c=void 0,h={authorsImageUrls:[void 0]},d=[{value:"Introduction",id:"introduction",level:2},{value:"AI\u2019s Impact: Aligning Tech with Strategy",id:"ais-impact-aligning-tech-with-strategy",level:2},{value:"The Importance of Orchestration",id:"the-importance-of-orchestration",level:2},{value:"Supervisor",id:"supervisor",level:3},{value:"Service Assistant",id:"service-assistant",level:3},{value:"Booking Assistant",id:"booking-assistant",level:3},{value:"Demo",id:"demo",level:2},{value:"Design Choices",id:"design-choices",level:2},{value:"Unit Testing",id:"unit-testing",level:2},{value:"Solution: LLM-Based Testing",id:"solution-llm-based-testing",level:3},{value:"Tracing: Observability and Monitoring",id:"tracing-observability-and-monitoring",level:2},{value:"Understanding the Flow of Requests with Langsmith",id:"understanding-the-flow-of-requests-with-langsmith",level:3},{value:"Real-World Examples",id:"real-world-examples",level:3}];function u(e){const n={a:"a",admonition:"admonition",em:"em",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"In this blog, I explore how a complex problem with moving parts can be solved, by having it broken down into smaller problems to be solved\u2014automatically."}),"\n",(0,t.jsx)(n.h2,{id:"ais-impact-aligning-tech-with-strategy",children:"AI\u2019s Impact: Aligning Tech with Strategy"}),"\n",(0,t.jsx)(n.p,{children:"Following from previous blog, suppose the (manual, semi automatic or automatic) ingestion of data from multiple service providers is done. How can a system answer users' queries? First lets group some possible queries into categories."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Query"}),(0,t.jsx)(n.th,{children:"Category"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Do you clean kitchen and cabinets?"}),(0,t.jsx)(n.td,{children:"Service"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"How much do you charge for cleaning toilets?"}),(0,t.jsx)(n.td,{children:"Service"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Is Jan 20 available for booking at 9am?"}),(0,t.jsx)(n.td,{children:"Booking"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Of course, any combination of the above queries and alike can be asked by the customer, which brings about some questions:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"How do we decide which category a question belongs to?"}),"\n",(0,t.jsx)(n.li,{children:"What if a question has multiple parts\u2014how do we process them in the right order?"}),"\n",(0,t.jsx)(n.li,{children:"Once we understand the question, how do we fetch and return the right information?"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'For example, if a user asks: "How much do you charge for cleaning toilets? Is Jan 20 available for booking at 9am?", the system needs to:'}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Recognize this is actually two separate queries\u2014one about pricing and one about booking."}),"\n",(0,t.jsx)(n.li,{children:"Process them in a way that makes sense (e.g., retrieve price then check availability)."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:['Notice that queries thus far are phrase in perfect English\u2014this is rarely how users phrase them. In reality, queries might be more fragmented or ambiguous. For example, someone might ask: "toilet how much and jan 20 9am can". See ',(0,t.jsx)(n.a,{href:"#demo",children:"demo"})," for more examples. I modeled how this could be done in reality."]}),"\n",(0,t.jsx)(n.h2,{id:"the-importance-of-orchestration",children:"The Importance of Orchestration"}),"\n",(0,t.jsx)(n.h3,{id:"supervisor",children:"Supervisor"}),"\n",(0,t.jsx)(n.p,{children:"Similar to real life, a Supervisor would:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"break down complex tasks into smaller tasks for specialized assistants"}),"\n",(0,t.jsx)(n.li,{children:'rewrite ambiguous queries into clearer requests (e.g., "toilet how much and jan 20 9am can" becomes "What is the price for cleaning a toilet?" and "Is Jan 20 available for booking at 9am?")'}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[Query] --\x3e B[Supervisor]\n\n    B -.-> |Translate| C[Service Assistant]\n    C --\x3e |Interpret| B\n\n    B -.->|Translate| D[Booking Assistant]\n    D --\x3e|Interpret| B\n\n    B -.-> E[Finish]\n\nsubgraph Legend\n    L1(( )) -.->|Optional| L2(( ))\n    L3(( )) --\x3e|Mandatory| L4(( ))\nend"}),"\n",(0,t.jsx)(n.h3,{id:"service-assistant",children:"Service Assistant"}),"\n",(0,t.jsx)(n.p,{children:"Having access to the possible cleaning services provided and the respective costs, the Service Assistant would:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reference the diagram to answer service related questions"}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[Translation] --\x3e B[Service Assistant]\n\n    B -.-> |Translate| C[Service Diagram]\n    C --\x3e B\n\n    B -.->|Interpret| D[Supervisor]\n\nsubgraph Legend\n    L1(( )) -.->|Optional| L2(( ))\n    L3(( )) --\x3e|Mandatory| L4(( ))\nend"}),"\n",(0,t.jsx)(n.admonition,{title:"Huge Diagram",type:"warning",children:(0,t.jsxs)(i,{children:[(0,t.jsx)("summary",{children:"Service Diagram"}),(0,t.jsx)(n.mermaid,{value:"flowchart LR\n    A[Living Area & Bedroom Cleaning] --\x3e B[Tasks]\n    B --\x3e|Dusting| C[Dust from top to bottom - $20]\n    B --\x3e|Dusting| D[Dust light fixtures and fans - $15]\n    B --\x3e|Dusting| E[Dust baseboards - $10]\n    B --\x3e|Blinds & Window Sills| F[Wipe blinds and window sills - $15]\n    B --\x3e|Vacuuming| G[Vacuum all floors - $25]\n    B --\x3e|Mopping| H[Mop hard surface flooring - $20]\n    B --\x3e|Trash| I[Empty trash bins - $10]\n    B --\x3e|Mirrors| J[Clean all mirrors - $15]\n    B --\x3e|Furniture| K[Clean furniture and decorative pieces - $30]\n    B --\x3e|Smudges| L[Remove all fingerprints and smudges - $10]\n    B --\x3e|Beds| M[Make beds - $20]\n    B --\x3e|Electronics| N[Dust electronics, lamps and lampshades - $20]\n    B --\x3e|Sanitize| O[Sanitize all remote controls and gaming equipment - $15]\n    B --\x3e|Tidy| P[Tidy electronic cables - $10]\n    B --\x3e|Tidy| Q[Tidy dressers - $15]\n    B --\x3e|Sanitize| R[Wipe and sanitise door knobs - $5]\n    B --\x3e|Sanitize| S[Wipe and sanitise light switches - $5]\n    B --\x3e|Recycling| T[Place recyclable items aside for public Recycling Bin - $5]\n\n    A --\x3e U[Kitchen Cleaning]\n    U --\x3e V[Tasks]\n    V --\x3e|Dusting| W[Dust from top to bottom - $20]\n    V --\x3e|Cleaning| X[Clean light fixtures and fans - $15]\n    V --\x3e|Sink & Countertop| Y[Clean sinks and counters - $25]\n    V --\x3e|Faucets & Drains| Z[Clean faucets and drains, remove any debris that could clog the drain - $20]\n    V --\x3e|Backsplash| AA[Wipe backsplash, remove grease and grime - $20]\n    V --\x3e|Cabinets| AB[Wipe all cabinets exterior - $15]\n    V --\x3e|Vacuum & Mop| AC[Vacuum and mop floors - $25]\n    V --\x3e|Stovetop & Hood| AD[Wipe stovetop and hood - $15]\n    V --\x3e|Appliance Cleaning| AE[Clean appliances exterior - $20]\n    V --\x3e|Fridge Cleaning| AF[Clean fridge exterior - $20]\n    V --\x3e|Trash| AG[Empty trash bins - $10]\n    V --\x3e|Recycling| AH[Place recyclable items aside for public Recycling Bin - $5]\n    V --\x3e|Blinds & Sills| AI[Wipe blinds and window sills - $15]\n    V --\x3e|Sanitize| AJ[Wipe and sanitise door knobs - $5]\n    V --\x3e|Sanitize| AK[Wipe and sanitise light switches - $5]\n\n    A --\x3e BATHROOM\n    BATHROOM --\x3e C[Tasks]\n    C --\x3e|Dusting| AL[Dust from top to bottom - $20]\n    C --\x3e|Light Fixtures| AM[Wipe light fixtures - $15]\n    C --\x3e|Blinds & Sills| AN[Wipe blinds and window sills - $15]\n    C --\x3e|Sink & Countertop| AO[Clean sink and countertops - $25]\n    C --\x3e|Mirrors| AP[Clean mirrors - $15]\n    C --\x3e|Faucets & Drains| AQ[Clean faucets and drains, remove any debris that could clog the drain - $20]\n    C --\x3e|Toilet| AR[Scrub toilet - $30]\n    C --\x3e|Floors| AS[Mop floors, scrub tiles if needed - $25]\n    C --\x3e|Shower| AT[Clean shower stall - $40]\n    C --\x3e|Bathtub| AU[Clean bathtub - $35]\n    C --\x3e|Shower Racks| AV[Wash shower racks - $10]\n    C --\x3e|Towels| AW[Fold and hang towels - $10]\n    C --\x3e|Fragrance| AX[Freshen toilets with fragrance - $5]\n    C --\x3e|Trash| AY[Empty trash bins - $10]\n    C --\x3e|Sanitize| AZ[Wipe and sanitise door knobs - $5]\n    C --\x3e|Sanitize| BA[Wipe and sanitise light switches - $5]\n    C --\x3e|Recycling| BB[Place recyclable items aside for public Recycling Bin - $5]"})]})}),"\n",(0,t.jsx)(n.h3,{id:"booking-assistant",children:"Booking Assistant"}),"\n",(0,t.jsx)(n.p,{children:"Having access to the booking system, the Booking Assistant would:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Check if the requested time slot is available."}),"\n",(0,t.jsx)(n.li,{children:"Confirm whether the user wants to proceed with the booking if the slot is open."}),"\n",(0,t.jsx)(n.li,{children:"Notify the user if the slot is unavailable and suggest the next available time."}),"\n"]}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\n    A[Translation] --\x3e B[Booking Assistant]\n\n    B -.-> |Translate| C[Scheduling Database]\n    C --\x3e B\n\n    B -.->|Interpret| D[Supervisor]\n\nsubgraph Legend\n    L1(( )) -.->|Optional| L2(( ))\n    L3(( )) --\x3e|Mandatory| L4(( ))\nend"}),"\n",(0,t.jsx)(n.h2,{id:"demo",children:"Demo"}),"\n",(0,t.jsxs)(n.p,{children:["Check out the ",(0,t.jsx)(n.a,{href:"https://nicholas-goh.com/use-cases/customer-service/ui",children:"demo"})," before we explore the challenges, technical details, and key insights."]}),"\n",(0,t.jsx)(o(),{playing:!0,controls:!0,url:"/vid/customer-service/customer-service-automation.MOV"}),"\n",(0,t.jsx)(n.h2,{id:"design-choices",children:"Design Choices"}),"\n",(0,t.jsxs)(n.p,{children:["In the ",(0,t.jsx)(n.a,{href:"/blog/etl-automation",children:"previous blog"}),", prebuilt LangChain agents handled most of the orchestration. However, this no longer applies since no existing prebuilt solution fully fits this use case. A custom approach is needed to orchestrate how the Service and Booking assistants work together."]}),"\n",(0,t.jsx)(n.p,{children:"A key consideration is deciding what logic belongs in prompts versus code:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Booking logic"}),": Overlapping bookings should be explicitly handled in code rather than inferred through prompts. This involves:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SQL triggers"})," to detect conflicts when a pending booking is inserted."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Structured error handling"})," to prevent hallucinations by ensuring the LLM has clear failure signals. For example:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:'"The timeslot overlaps with an existing booking for worker %: conflicting booking from % to %. Next available time is %."'})," This allows the model to provide accurate responses instead of guessing."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Assistant selection"}),": Routing decisions are heuristic at best in code, so an LLM should determine the appropriate assistant. This involves:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Supervisor setting execution order"}),", ensuring assistants act in the correct sequence."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Supervisor restructuring queries"}),", converting user input into precise tasks for each assistant."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"By handling failures explicitly at the code level, the system minimizes hallucinations, ensuring that assistants provide accurate and meaningful responses."}),"\n",(0,t.jsx)(n.h2,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,t.jsx)(n.p,{children:"Unit testing is crucial for maintaining system reliability, especially in an agentic workflow where:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Small prompt changes can alter agent outputs."}),"\n",(0,t.jsx)(n.li,{children:"These changes propagate to downstream agents, potentially affecting the entire system."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"From my experience, traditional unit tests don\u2019t always work well in this setup because:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"LLM outputs can still vary, even with the same input and temperature set to 0."}),"\n",(0,t.jsx)(n.li,{children:"Exact string matching is unreliable\u2014tests should pass if expected and actual outputs are semantically equivalent."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"solution-llm-based-testing",children:"Solution: LLM-Based Testing"}),"\n",(0,t.jsx)(n.p,{children:"To address this, an LLM can evaluate test results based on meaning rather than exact wording. This ensures robustness while allowing for natural variations in language."}),"\n",(0,t.jsx)(n.h2,{id:"tracing-observability-and-monitoring",children:"Tracing: Observability and Monitoring"}),"\n",(0,t.jsx)(n.h3,{id:"understanding-the-flow-of-requests-with-langsmith",children:"Understanding the Flow of Requests with Langsmith"}),"\n",(0,t.jsx)(n.p,{children:"Langsmith provides a structured way to visualize the flow of a request, making it easier to debug and optimize AI agent interactions. By tracing execution paths, we can pinpoint issues such as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Incorrect outputs"}),": If an agent produces the wrong response, the issue could stem from:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unclear instructions"}),": The prompt may need refinement to provide better guidance."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Misaligned tool descriptions"}),": The selected tool may not match the query or task."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Incorrect input from a previous step"}),": The agent might be receiving flawed information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Model limitations"}),": If none of the above apply, the agent may lack the necessary capacity, requiring a model upgrade."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"High latency"}),": If an agent's trace is taking too long to respond, the delay could be caused by:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Excessive looping"}),": By examining the trace of the agent, we can determine if the LLM is repeatedly generating responses. If so, breaking the task into smaller subtasks may improve efficiency."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistently high latency"}),": This may indicate network delays or rate limiting."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Tracing helped me quickly diagnose issues, minimizing debugging time by enabling me to focus directly on areas that needed improvement."}),"\n",(0,t.jsx)(n.h3,{id:"real-world-examples",children:"Real-World Examples"}),"\n",(0,t.jsx)(n.p,{children:"Here are the sample traces from the demo."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://smith.langchain.com/public/7e8dd233-a875-48ec-a26c-6d5abab0d81e/r",children:"do u mop kitchen and cabinets"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://smith.langchain.com/public/b5221550-842c-4814-bbd1-952aeef47497/r",children:"toilet how much and jan 20 9am available?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://smith.langchain.com/public/1b413373-1d00-4985-8c98-1d5f456c967f/r",children:"jan 20 12pm can"})}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}}}]);